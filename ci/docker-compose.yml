version: '3.9'

x-backend-env:
  &backend-env
    DEBUG: ${DEBUG}
    SECRET_KEY: ${SECRET_KEY}

    DSN__DATABASE: ${DSN__DATABASE}
    REDIS_LOCATION: 'redis://redis:6379/1'
    RABBITMQ_HOSTS: 'mq'
    RABBITMQ_USER: ${MQ_USER}
    RABBITMQ_PASSWORD: ${MQ_PASS}
    RABBITMQ_VHOST: ${MQ_VHOST}

    TG_BOT_TOKEN: ${TG_BOT_TOKEN}

    TZ: "Europe/Moscow"

x-backend:
  &backend
  build:
    context: ../
    dockerfile: ci/backend/Dockerfile
  restart: on-failure
  tty: true
  volumes:
    - "../app/:/var/app"
  environment:
    <<: *backend-env
  depends_on:
    - postgres
    - redis
    - mq


services:
  bot:
    <<: *backend
    command: >
      sh -c "python /var/app/manage.py makemigrations --noinput &&
             python /var/app/manage.py migrate --noinput &&
             python /var/app/manage.py loaddata avito_categories &&
             python /var/app/manage.py start_bot"

  avito_selenium_parse:
    <<: *backend
    command: >
      python /var/app/manage.py avito_parse

  send_offers:
    <<: *backend
    command: >
      python /var/app/manage.py send_offers

  postgres:
    image: postgres:15.2
    volumes:
      - "pgdata:/var/lib/postgresql/data/pgdata"
    environment:
      POSTGRES_USER: telegram_avito_bot
      POSTGRES_PASSWORD: telegram_avito_bot
      POSTGRES_DB: telegram_avito_bot
      # где храним БД внутри контейнера
      PGDATA: "/var/lib/postgresql/data/pgdata"
      TZ: "Europe/Moscow"

  redis:
    image: redis:alpine
    expose:
      - 6379
    volumes:
      - "redis_data:/data"

  mq:
    image: rabbitmq:management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - "mq_data:/var/lib/rabbitmq"
    environment:
      RABBITMQ_DEFAULT_USER: ${MQ_USER}
      RABBITMQ_DEFAULT_PASS: ${MQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${MQ_VHOST}


volumes:
  pgdata: {}
  redis_data: {}
  mq_data: {}
